(define (make-konto balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (begin (set! balance (+ balance amount))
           balance))
  (lambda (operation)
    (cond ((eq? operation 'withdraw) withdraw)
          ((eq? operation 'deposit) deposit)
          ((eq? operation 'balance) balance)
          (else "Invalid operation"))))

#(define k1 (make-konto 100))
#((k1 'withdraw) 40)
#(k1 'balance)
#((k1 'deposit) 10)

(define (make-konto balance password)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
            balance)
        "Insufficient funds"
    )
  )
  (define (deposit amount)
    (begin (set! balance (+ balance amount))
        balance)
  )
  (define (incorrect-password . args)
    "Incorrect password")
  (lambda (pass operation)
    (if (eq? password pass)
        (cond ((eq? operation 'withdraw) withdraw)
            ((eq? operation 'deposit) deposit)
            ((eq? operation 'balance) balance)
            (else "Invalid operation"))
        (if (eq? operation 'balance)
            "Incorrect password"
            (lambda args "Incorrect password")
        )
    )
  )
)

#(define k2 (make-konto 100 'password))
#((k2 'w-password 'withdraw) 40)
#((k2 'password 'withdraw) 40)
#((k2 'w-password 'deposit) 10)
#((k2 'password 'deposit) 10)
#(k2 'w-password 'balance)
#(k2 'password 'balance)