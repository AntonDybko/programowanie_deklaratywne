(define (iter f n)
    (lambda (x)
        (if (zero? n)
            x
            ((iter f (- n 1)) (f x))
        )
    )
)

(define (square n) (* n n))
(define (double n) (* n 2))

((iter square 3) 5)


#3 => ( lambda (x) ((iter f 2) (f x)) ) 
#2 => (lambda (x) ((lambda (x) ((iter f 1) (f x))) (f x)))
#1 => (lambda (x) ((lambda (x) ((lambda (x) ((iter f 0) (f x)))  (f x))) (f x)))
#0 => (lambda (x) ((lambda (x) ((lambda (x) ((lambda (x) x)  (f x)))  (f x))) (f x)))


