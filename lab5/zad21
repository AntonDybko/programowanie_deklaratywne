(define (eval expression values)
  (cond ((eq? (car expression) 'and) (and-expr? (cdr expression) values))
        ((eq? (car expression) 'or) (or-expr? (cdr expression) values))
        ((eq? (car expression) 'not) (not-expr? (cadr expression) values))
        (else (assoc-value (car expression) values))))

(define (and-expr? exprs values)
  (cond ((null? exprs) #t)
        ((eval (car exprs) values) (and-expr? (cdr exprs) values))
        (else #f)))

(define (or-expr? exprs values)
  (cond ((null? exprs) #f)
        ((eval (car exprs) values) #t)
        (else (or-expr? (cdr exprs) values))))

(define (not-expr? expr values)
  (not (eval expr values)))

(define (assoc-value variable values)
  (cdr (assoc variable values)))